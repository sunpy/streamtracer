[tox]
min_version = 4.0
requires =
    tox-pypi-filter>=0.14
envlist =
    py{310,311,312}{,-oldestdeps,-devdeps}
    build_docs
    codestyle
isolated_build = true

[testenv]
pypi_filter = https://raw.githubusercontent.com/sunpy/sunpy/main/.test_package_pins.txt
# Run the tests in a temporary directory to make sure that we don't import
# the package from the source tree
change_dir = .tmp/{envname}
description =
    run tests
    oldestdeps: with the oldest supported version of key dependencies
    devdeps: with the latest developer version of key dependencies

pass_env =
    # Custom compiler locations (such as ccache)
    CC
    # Location of locales (needed by sphinx on some systems)
    LOCALE_ARCHIVE
    # If the user has set a LC override we should follow it
    LC_ALL

set_env =
    MPLBACKEND=agg
    devdeps: PIP_EXTRA_INDEX_URL = https://pypi.anaconda.org/astropy/simple https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
    # Define the base test command here to allow us to add more flags for each tox factor
    PYTEST_COMMAND = pytest -vvv -r fEs --pyargs streamtracer --cov-report=xml --cov=streamtracer --cov-config={toxinidir}/pyproject.toml {toxinidir}/docs

deps =
    # For packages which publish nightly wheels this will pull the latest nightly
    devdeps: numpy>=0.0.dev0
    # Packages without nightly wheels will be built from source like this
    devdeps: git+https://github.com/sunpy/sunpy
    oldestdeps: minimum_dependencies
    pytest-cov

# The following indicates which extras_require will be installed
extras =
    tests

commands_pre =
    oldestdeps: minimum_dependencies streamtracer --filename requirements-min.txt
    oldestdeps: pip install -r requirements-min.txt
    pip freeze --all --no-input

commands =
    # To run different commands for different factors exclude the factor from the default command like this
    # !online: {env:PYTEST_COMMAND} {posargs}
    # Then specify a specific one like this
    # online: {env:PYTEST_COMMAND} --remote-data=any {posargs}
    # If you have no factors which require different commands this is all you need:
    {env:PYTEST_COMMAND} {posargs}

[testenv:codestyle]
pypi_filter =
skip_install = true
description = Run all style and file checks with pre-commit
deps =
    pre-commit
commands =
    pre-commit install-hooks
    pre-commit run --color always --all-files --show-diff-on-failure

[testenv:build_docs]
description = invoke sphinx-build to build the HTML docs
change_dir =
    docs
extras =
    docs
commands =
    sphinx-build --color -W --keep-going -b html -d _build/.doctrees . _build/html {posargs}
